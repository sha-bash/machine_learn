import re
import numpy as np
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier, plot_tree

# Data points
data_x = [(444, 413), (403, 152), (239, 63), (271, 240), (363, 184), (105, 161), (233, 86), (301, 116), (84, 430), (316, 224), (308, 339), (366, 215), (246, 66), (251, 288), (443, 434), (137, 255), (194, 48), (390, 190), (222, 43), (253, 137), (420, 99), (165, 114), (174, 305), (143, 144), (371, 117), (313, 261), (298, 174), (386, 51), (163, 423), (204, 89), (89, 128), (416, 166), (299, 311), (135, 406), (378, 325), (428, 141), (328, 138), (136, 203), (340, 293), (272, 38), (351, 245), (177, 270), (219, 189), (176, 372), (216, 25), (282, 67), (156, 368), (267, 341), (194, 70), (315, 223), (343, 176), (391, 132), (114, 113), (352, 378), (106, 397), (396, 349), (233, 93), (345, 184), (299, 144), (251, 31), (139, 87), (77, 388), (172, 185), (206, 168), (298, 201), (242, 218), (355, 109), (217, 58), (359, 146), (214, 192), (105, 397), (131, 429), (424, 66), (260, 190), (70, 83), (112, 293), (140, 356), (416, 410), (357, 108), (286, 40), (170, 414), (253, 86), (431, 386), (211, 369), (369, 79), (381, 395), (238, 162), (392, 207), (195, 214), (193, 210), (185, 136), (102, 76), (245, 47), (429, 447), (215, 76), (151, 235), (266, 369), (209, 309), (406, 441), (95, 338), (277, 308), (245, 93), (137, 328), (404, 189), (218, 384), (124, 78), (397, 100), (306, 396), (339, 272), (431, 116), (342, 413), (78, 353), (372, 435), (262, 55), (235, 345), (77, 417), (379, 155), (325, 94), (222, 247)]

data_y = [1, 2, 3, 1, 2, 1, 3, 2, 2, 2, 1, 2, 3, 1, 1, 2, 3, 2, 3, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 3, 1, 2, 2, 2, 1, 2, 2, 1, 1, 3, 2, 1, 1, 2, 3, 3, 2, 2, 3, 2, 2, 2, 1, 1, 2, 1, 3, 2, 2, 3, 1, 2, 1, 1, 2, 1, 2, 3, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 3, 2, 3, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 2, 1, 3, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 3, 1, 2, 2, 2, 1]

train_data = np.array(data_x)
train_labels = np.array(data_y)

clf_tree = DecisionTreeClassifier(criterion='gini', max_depth=10, random_state=3)
clf_tree.fit(train_data, train_labels)

#plot_tree(clf_tree)

# Generate a grid for plotting decision regions
x_min, x_max = train_data[:, 0].min() - 1, train_data[:, 0].max() + 1
y_min, y_max = train_data[:, 1].min() - 1, train_data[:, 1].max() + 1

xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.1),
                     np.arange(y_min, y_max, 0.1))

predicted = clf_tree.predict(np.c_[xx.ravel(), yy.ravel()]).reshape(xx.shape)

plt.pcolormesh(xx, yy, predicted, cmap='spring', shading='auto')
plt.scatter(train_data[:, 0], train_data[:, 1], c=train_labels, s=50, cmap='spring', edgecolors='black', linewidth=1.5)
plt.show()
